35. Search Insert Position
Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums contains distinct values sorted in ascending order.
-104 <= target <= 104

class Solution {
public:
    /*
    1. check the middle element if me == target or me> target right array is searched
    2. me< target left array is searched*/
    int searchInsert(vector<int>& nums, int target) {
        int n=nums.size();
        int i=0, j=n-1, m=n/2;
        if(nums[i]>=target) return i;
        if(nums[j]<target) return j+1;
        if(nums[j]==target) return j;
        while(true)
        {   
            if(nums[m]==target || nums[m]>target && nums[m-1]<target) return m;
            if(nums[m]<target && nums[m+1]>target) return m+1;
            if(nums[m]>target)
                 j=m; 
            else
                i=m;
            m=(i+j)/2;
        }
        
    }
};

Runtime: 0 ms, faster than 100.00% of C++ online submissions for Search Insert Position.
Memory Usage: 9.7 MB, less than 23.78% of C++ online submissions for Search Insert Position.

