20. Valid Parentheses

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.
class Solution {
    /*Stack 
    top Index
    Iterate the string and push it in the stack for all open parentheses 
    and pop the stack for close parenthesis*/
public:
    bool isValid(string s) {
        int n = s.length();
        int *stack = new int[n];
        int top=-1;
        if(n%2 == 1) return false;
        for(int i=0; i<n; i++)
        {
            if(s[i]=='(' || s[i]=='[' || s[i]=='{')
                   stack[++top] = s[i];
            else if(top>=0 && ((s[i]==')' && stack[top]=='(') || 
                               (s[i]==']' && stack[top]=='[') ||
                               (s[i]=='}' && stack[top]=='{')))
                    top--;
            else 
                return false;
        }
        if(top==-1)
           return true;
        else
           return false;
    }
};
Runtime: 0 ms, faster than 100.00% of C++ online submissions for Valid Parentheses.
Memory Usage: 6.4 MB, less than 9.98% of C++ online submissions for Valid Parentheses.
