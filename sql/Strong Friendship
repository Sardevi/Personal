1949. Strong Friendship
Table: Friendship

+-------------+------+
| Column Name | Type |
+-------------+------+
| user1_id    | int  |
| user2_id    | int  |
+-------------+------+
(user1_id, user2_id) is the primary key for this table.
Each row of this table indicates that the users user1_id and user2_id are friends.
Note that user1_id < user2_id.
 

A friendship between a pair of friends x and y is strong if x and y have at least three common friends.

Write an SQL query to find all the strong friendships.

Note that the result table should not contain duplicates with user1_id < user2_id.

Return the result table in any order.

The query result format is in the following example.

 

Example 1:

Input: 
Friendship table:
+----------+----------+
| user1_id | user2_id |
+----------+----------+
| 1        | 2        |
| 1        | 3        |
| 2        | 3        |
| 1        | 4        |
| 2        | 4        |
| 1        | 5        |
| 2        | 5        |
| 1        | 7        |
| 3        | 7        |
| 1        | 6        |
| 3        | 6        |
| 2        | 6        |
+----------+----------+
Output: 
+----------+----------+---------------+
| user1_id | user2_id | common_friend |
+----------+----------+---------------+
| 1        | 2        | 4             |
| 1        | 3        | 3             |
+----------+----------+---------------+
Explanation: 
Users 1 and 2 have 4 common friends (3, 4, 5, and 6).
Users 1 and 3 have 3 common friends (2, 6, and 7).
We did not include the friendship of users 2 and 3 because they only have two common friends (1 and 6).
# MySQL query statement below
/*
find all the strong friendships. [ 3 or more common friends]
Result format : user1_id | user2_id | common_friend (number of)
Alg:
1. find for every user their friends Eg: User=1, Friends : 2,3,4,5,7,6 , User = 2, Friends = 1,3,4,5,6
2. For every user_id in the relationship find how many friends each have Eg: relationship between (1,2) they both have (3,4,5,6) friends
*/
WITH Friends AS
(
    SELECT user1_id user_id,
           user2_id friend
    FROM Friendship
    UNION
    SELECT user2_id user_id,
           user1_id friend
    FROM Friendship
)
SELECT user1_id,
       user2_id,
      COUNT(DISTINCT f2.friend) common_friend
FROM Friendship fs
JOIN Friends f1
 ON fs.user1_id = f1.user_id
JOIN Friends f2
 ON fs.user2_id = f2.user_id
 AND f1.friend = f2.friend
GROUP BY user1_id,
         user2_id
HAVING common_friend >= 3 

Runtime: 366 ms, faster than 75.00% of MySQL online submissions for Strong Friendship.
Memory Usage: 0B, less than 100.00% of MySQL online submissions for Strong Friendship.
