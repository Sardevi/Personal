1731. The Number of Employees Which Report to Each Employee
Table: Employees

+-------------+----------+
| Column Name | Type     |
+-------------+----------+
| employee_id | int      |
| name        | varchar  |
| reports_to  | int      |
| age         | int      |
+-------------+----------+
employee_id is the primary key for this table.
This table contains information about the employees and the id of the manager they report to. Some employees do not report to anyone (reports_to is null). 
 

For this problem, we will consider a manager an employee who has at least 1 other employee reporting to them.

Write an SQL query to report the ids and the names of all managers, the number of employees who report directly to them, and the average age of the reports rounded to the nearest integer.

Return the result table ordered by employee_id.

The query result format is in the following example.

 

Example 1:

Input: 
Employees table:
+-------------+---------+------------+-----+
| employee_id | name    | reports_to | age |
+-------------+---------+------------+-----+
| 9           | Hercy   | null       | 43  |
| 6           | Alice   | 9          | 41  |
| 4           | Bob     | 9          | 36  |
| 2           | Winston | null       | 37  |
+-------------+---------+------------+-----+
Output: 
+-------------+-------+---------------+-------------+
| employee_id | name  | reports_count | average_age |
+-------------+-------+---------------+-------------+
| 9           | Hercy | 2             | 39          |
+-------------+-------+---------------+-------------+
Explanation: Hercy has 2 people report directly to him, Alice and Bob. Their average age is (41+36)/2 = 38.5, which is 39 after rounding it to the nearest integer.
# MySQL query statement below
/*
1. Find per Mgr_id, num/count(reports), Avg(age)
2. Self join to find the Mgr who is also an employees name
3. Round the avg_range
*/

WITH Manager AS
(
    SELECT reports_to mgr_id,
           COUNT(1) reports_count,
           ROUND(AVG(age),0) average_age
    FROM Employees
    WHERE reports_to IS NOT NULL
    GROUP BY mgr_id
)
SELECT e.employee_id,
       e.name,
       m.reports_count,
       m.average_age
FROM Employees e
JOIN Manager m
  ON e.employee_id = m.mgr_id
ORDER BY employee_id

Runtime: 550 ms, faster than 82.27% of MySQL online submissions for The Number of Employees Which Report to Each Employee.
Memory Usage: 0B, less than 100.00% of MySQL online submissions for The Number of Employees Which Report to Each Employee.
